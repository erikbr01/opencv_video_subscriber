// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MotorSpeed.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MotorSpeed.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::MotorSpeed::MotorSpeed()
{
    // m_motor_speed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@258e2e41
    m_motor_speed = 0.0;

}

idl_msg::MotorSpeed::~MotorSpeed()
{
}

idl_msg::MotorSpeed::MotorSpeed(
        const MotorSpeed& x)
{
    m_motor_speed = x.m_motor_speed;
}

idl_msg::MotorSpeed::MotorSpeed(
        MotorSpeed&& x)
{
    m_motor_speed = x.m_motor_speed;
}

idl_msg::MotorSpeed& idl_msg::MotorSpeed::operator =(
        const MotorSpeed& x)
{

    m_motor_speed = x.m_motor_speed;

    return *this;
}

idl_msg::MotorSpeed& idl_msg::MotorSpeed::operator =(
        MotorSpeed&& x)
{

    m_motor_speed = x.m_motor_speed;

    return *this;
}

size_t idl_msg::MotorSpeed::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t idl_msg::MotorSpeed::getCdrSerializedSize(
        const idl_msg::MotorSpeed& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void idl_msg::MotorSpeed::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_motor_speed;

}

void idl_msg::MotorSpeed::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_motor_speed;
}

/*!
 * @brief This function sets a value in member motor_speed
 * @param _motor_speed New value for member motor_speed
 */
void idl_msg::MotorSpeed::motor_speed(
        float _motor_speed)
{
    m_motor_speed = _motor_speed;
}

/*!
 * @brief This function returns the value of member motor_speed
 * @return Value of member motor_speed
 */
float idl_msg::MotorSpeed::motor_speed() const
{
    return m_motor_speed;
}

/*!
 * @brief This function returns a reference to member motor_speed
 * @return Reference to member motor_speed
 */
float& idl_msg::MotorSpeed::motor_speed()
{
    return m_motor_speed;
}


size_t idl_msg::MotorSpeed::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool idl_msg::MotorSpeed::isKeyDefined()
{
    return false;
}

void idl_msg::MotorSpeed::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

