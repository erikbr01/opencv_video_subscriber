// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ThrustTorqueCommand.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ThrustTorqueCommand.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::ThrustTorqueCommand::ThrustTorqueCommand()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@78e117e3

    // m_thrust com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2ea227af
    m_thrust = 0.0;
    // m_roll_torque com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4386f16
    m_roll_torque = 0.0;
    // m_pitch_torque com.eprosima.idl.parser.typecode.PrimitiveTypeCode@363ee3a2
    m_pitch_torque = 0.0;
    // m_yaw_torque com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4690b489
    m_yaw_torque = 0.0;

}

idl_msg::ThrustTorqueCommand::~ThrustTorqueCommand()
{





}

idl_msg::ThrustTorqueCommand::ThrustTorqueCommand(
        const ThrustTorqueCommand& x)
{
    m_header = x.m_header;
    m_thrust = x.m_thrust;
    m_roll_torque = x.m_roll_torque;
    m_pitch_torque = x.m_pitch_torque;
    m_yaw_torque = x.m_yaw_torque;
}

idl_msg::ThrustTorqueCommand::ThrustTorqueCommand(
        ThrustTorqueCommand&& x)
{
    m_header = std::move(x.m_header);
    m_thrust = x.m_thrust;
    m_roll_torque = x.m_roll_torque;
    m_pitch_torque = x.m_pitch_torque;
    m_yaw_torque = x.m_yaw_torque;
}

idl_msg::ThrustTorqueCommand& idl_msg::ThrustTorqueCommand::operator =(
        const ThrustTorqueCommand& x)
{

    m_header = x.m_header;
    m_thrust = x.m_thrust;
    m_roll_torque = x.m_roll_torque;
    m_pitch_torque = x.m_pitch_torque;
    m_yaw_torque = x.m_yaw_torque;

    return *this;
}

idl_msg::ThrustTorqueCommand& idl_msg::ThrustTorqueCommand::operator =(
        ThrustTorqueCommand&& x)
{

    m_header = std::move(x.m_header);
    m_thrust = x.m_thrust;
    m_roll_torque = x.m_roll_torque;
    m_pitch_torque = x.m_pitch_torque;
    m_yaw_torque = x.m_yaw_torque;

    return *this;
}

size_t idl_msg::ThrustTorqueCommand::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::ThrustTorqueCommand::getCdrSerializedSize(
        const idl_msg::ThrustTorqueCommand& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msg::ThrustTorqueCommand::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_thrust;
    scdr << m_roll_torque;
    scdr << m_pitch_torque;
    scdr << m_yaw_torque;

}

void idl_msg::ThrustTorqueCommand::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_thrust;
    dcdr >> m_roll_torque;
    dcdr >> m_pitch_torque;
    dcdr >> m_yaw_torque;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void idl_msg::ThrustTorqueCommand::header(
        const idl_msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void idl_msg::ThrustTorqueCommand::header(
        idl_msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const idl_msg::Header& idl_msg::ThrustTorqueCommand::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
idl_msg::Header& idl_msg::ThrustTorqueCommand::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member thrust
 * @param _thrust New value for member thrust
 */
void idl_msg::ThrustTorqueCommand::thrust(
        float _thrust)
{
    m_thrust = _thrust;
}

/*!
 * @brief This function returns the value of member thrust
 * @return Value of member thrust
 */
float idl_msg::ThrustTorqueCommand::thrust() const
{
    return m_thrust;
}

/*!
 * @brief This function returns a reference to member thrust
 * @return Reference to member thrust
 */
float& idl_msg::ThrustTorqueCommand::thrust()
{
    return m_thrust;
}

/*!
 * @brief This function sets a value in member roll_torque
 * @param _roll_torque New value for member roll_torque
 */
void idl_msg::ThrustTorqueCommand::roll_torque(
        float _roll_torque)
{
    m_roll_torque = _roll_torque;
}

/*!
 * @brief This function returns the value of member roll_torque
 * @return Value of member roll_torque
 */
float idl_msg::ThrustTorqueCommand::roll_torque() const
{
    return m_roll_torque;
}

/*!
 * @brief This function returns a reference to member roll_torque
 * @return Reference to member roll_torque
 */
float& idl_msg::ThrustTorqueCommand::roll_torque()
{
    return m_roll_torque;
}

/*!
 * @brief This function sets a value in member pitch_torque
 * @param _pitch_torque New value for member pitch_torque
 */
void idl_msg::ThrustTorqueCommand::pitch_torque(
        float _pitch_torque)
{
    m_pitch_torque = _pitch_torque;
}

/*!
 * @brief This function returns the value of member pitch_torque
 * @return Value of member pitch_torque
 */
float idl_msg::ThrustTorqueCommand::pitch_torque() const
{
    return m_pitch_torque;
}

/*!
 * @brief This function returns a reference to member pitch_torque
 * @return Reference to member pitch_torque
 */
float& idl_msg::ThrustTorqueCommand::pitch_torque()
{
    return m_pitch_torque;
}

/*!
 * @brief This function sets a value in member yaw_torque
 * @param _yaw_torque New value for member yaw_torque
 */
void idl_msg::ThrustTorqueCommand::yaw_torque(
        float _yaw_torque)
{
    m_yaw_torque = _yaw_torque;
}

/*!
 * @brief This function returns the value of member yaw_torque
 * @return Value of member yaw_torque
 */
float idl_msg::ThrustTorqueCommand::yaw_torque() const
{
    return m_yaw_torque;
}

/*!
 * @brief This function returns a reference to member yaw_torque
 * @return Reference to member yaw_torque
 */
float& idl_msg::ThrustTorqueCommand::yaw_torque()
{
    return m_yaw_torque;
}


size_t idl_msg::ThrustTorqueCommand::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool idl_msg::ThrustTorqueCommand::isKeyDefined()
{
    return false;
}

void idl_msg::ThrustTorqueCommand::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}

