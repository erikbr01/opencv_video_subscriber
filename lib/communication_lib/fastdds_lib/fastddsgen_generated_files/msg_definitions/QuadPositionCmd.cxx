// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file QuadPositionCmd.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "QuadPositionCmd.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::QuadPositionCmd::QuadPositionCmd()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@56a6d5a6

    // m_position com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@18ce0030

    // m_yaw_angle com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4445629
    m_yaw_angle = 0.0;

}

idl_msg::QuadPositionCmd::~QuadPositionCmd()
{



}

idl_msg::QuadPositionCmd::QuadPositionCmd(
        const QuadPositionCmd& x)
{
    m_header = x.m_header;
    m_position = x.m_position;
    m_yaw_angle = x.m_yaw_angle;
}

idl_msg::QuadPositionCmd::QuadPositionCmd(
        QuadPositionCmd&& x)
{
    m_header = std::move(x.m_header);
    m_position = std::move(x.m_position);
    m_yaw_angle = x.m_yaw_angle;
}

idl_msg::QuadPositionCmd& idl_msg::QuadPositionCmd::operator =(
        const QuadPositionCmd& x)
{

    m_header = x.m_header;
    m_position = x.m_position;
    m_yaw_angle = x.m_yaw_angle;

    return *this;
}

idl_msg::QuadPositionCmd& idl_msg::QuadPositionCmd::operator =(
        QuadPositionCmd&& x)
{

    m_header = std::move(x.m_header);
    m_position = std::move(x.m_position);
    m_yaw_angle = x.m_yaw_angle;

    return *this;
}

size_t idl_msg::QuadPositionCmd::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += idl_msg::Position::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::QuadPositionCmd::getCdrSerializedSize(
        const idl_msg::QuadPositionCmd& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += idl_msg::Position::getCdrSerializedSize(data.position(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msg::QuadPositionCmd::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_position;
    scdr << m_yaw_angle;

}

void idl_msg::QuadPositionCmd::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_position;
    dcdr >> m_yaw_angle;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void idl_msg::QuadPositionCmd::header(
        const idl_msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void idl_msg::QuadPositionCmd::header(
        idl_msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const idl_msg::Header& idl_msg::QuadPositionCmd::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
idl_msg::Header& idl_msg::QuadPositionCmd::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void idl_msg::QuadPositionCmd::position(
        const idl_msg::Position& _position)
{
    m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void idl_msg::QuadPositionCmd::position(
        idl_msg::Position&& _position)
{
    m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const idl_msg::Position& idl_msg::QuadPositionCmd::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
idl_msg::Position& idl_msg::QuadPositionCmd::position()
{
    return m_position;
}
/*!
 * @brief This function sets a value in member yaw_angle
 * @param _yaw_angle New value for member yaw_angle
 */
void idl_msg::QuadPositionCmd::yaw_angle(
        float _yaw_angle)
{
    m_yaw_angle = _yaw_angle;
}

/*!
 * @brief This function returns the value of member yaw_angle
 * @return Value of member yaw_angle
 */
float idl_msg::QuadPositionCmd::yaw_angle() const
{
    return m_yaw_angle;
}

/*!
 * @brief This function returns a reference to member yaw_angle
 * @return Reference to member yaw_angle
 */
float& idl_msg::QuadPositionCmd::yaw_angle()
{
    return m_yaw_angle;
}


size_t idl_msg::QuadPositionCmd::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::QuadPositionCmd::isKeyDefined()
{
    return false;
}

void idl_msg::QuadPositionCmd::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

